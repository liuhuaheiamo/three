1  特点
   目前的三大框架之一 
   轻量级框架
   数据驱动框架(关注逻辑层，减少dom操作)
   生态圈丰富，适合初学者


2  mvvm  基于mvc模式改编
    mvc模式：jquery基于mvc模式
    mvvm
       m：model    js
       v  view     html
       vm  v+m
          mv中包含m   m改变--->vm----v也改变   vm相当于中间的传递
3 安装使用
  vue.js
  var app = new Vue({
      el:''   绑定，指定将当前实例对象中的数据/方法挂载到      不能用html和body
      data:{

      },
      method:{     //自定义函数

      },
      computed:{ //计算属性

      },    
      watch:{   //监听属性

      },
  });

4 挂载 也及时页面渲染
  挂载基本变量
      {{msg}}
      可以写js代码{{msg+'hello'}}    //不建议使用   模块化代码分离
   v-html='str'      可以写html代码  str为一个data里面的数据变量
   属性绑定
     v-bind:id='ids'     这里的ids为data里面的数据ids为变量
   事件绑定
     v-on:type.修饰符
       @type.修饰符
           修饰符
             .stop
             .prevent
             .once  当前函数执行一次
             .self  
             修饰符可以连用
       v-on:click.stop='' 修饰符修饰当前事件
            属性值  
              可以直接用javascript直接执行
              或者可以为函数，执行函数  
              在window中调用click
              可以在函数中传值
                 常量
                 变量
                 事件对象


  局部组件
      new Vue({
        el
        data
        mothods
        component:{
          声明多个组件

          data
          methods
          templat
        }
      })


      组件的机制
        概述
        组件(component)是vue.js最强大的功能之一，组件可以拓展html元素，可以封装课重写的代码。在较高的层面上，组件是自定义元素，vue的编辑器为他添加特殊的功能，在某些情况下，组件也可以表现为用js特性进行了拓展的原生html元素，组件注册时候需要为组件指定各种参数
        定义
          因为组件是可以复用的vue实例，所以他们与new vue接受相同的选项，除了el
          一个组件的data选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立拷贝
      组件注册
        1 全局注册
        可以使用Vue,component()注册一个全局组件，注册之后可以用在任何新创建的vue根实例模板中

        2 局部注册
          全局注册往往不够理想，比如如果你使用一个像webpack这样的构造系统，全局注册所有组件意味着即使你已经不在使用一个组件，他依然会被包含在你最终的构建结果中，造成用户下载javascript的无谓增加。局部注册组件智能在当前组件中使用。


        3 组件交互
          组件a在他的模板中使用了组件b他们之间必然需要互相通信，父组件可能要给与子组件下发数据，子组件则可能要将他内部的事件告诉父组件，在vue中父组件的关系可以总结为prop向下传递，事件向上传递，父组件通过prop给子组件下发数据，子组件通过事件给父组件发送信息
   